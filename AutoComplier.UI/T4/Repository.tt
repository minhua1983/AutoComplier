<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ Assembly name="D:\minhua\workspace\AutoComplier\AutoComplier.UICore\bin\release\AutoComplier.UICore.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AutoComplier.UICore" #>
<#@ import namespace="AutoComplier.UICore.Common" #>
<#@ import namespace="AutoComplier.UICore.Models.Base" #>
<#@ output extension=".cs" #>

<# 
List<Table> tableList = TableHelper.List(new Server{
	IP = "DIY-PC",
	User = "sa",
	Pass = "Alpha2Bravo",
	DefaultDatabase = "Demo"
});
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Linq;
using Dapper;
using AutoComplier.UI.Models;

namespace AutoComplier.UI.Repositories
{
	//生成时间：<#=DateTime.Now.ToString()#>
<#


tableList.ForEach(table => {
	string primaryKey = string.Empty;
	table.ColumnList.ForEach(column => {
		if(column.IsPrimaryKey) primaryKey = column.Name;
	});
#>
	public partial class <#=table.Name#>Repository
	{
		string connectionString = ConfigurationManager.AppSettings["demo"];

		public List<<#=table.Name#>> List()
		{
			List<<#=table.Name#>> result;
			using(IDbConnection conn = new SqlConnection(connectionString))
			{
				result = conn.Query<<#=table.Name#>>("SELECT * FROM [<#=table.Name#>]").AsList();
			}
			return result;
		}

		public <#=table.Name#> Detail(int identity)
		{
			<#=table.Name#> result;
			using(IDbConnection conn = new SqlConnection(connectionString))
			{
				result = conn.Query<<#=table.Name#>>("SELECT * FROM [<#=table.Name#>] WHERE [<#=primaryKey#>] = @<#=primaryKey#>",new { <#=primaryKey#> = identity }).FirstOrDefault();
			}
			return result;
		}

		public <#=table.Name#> Insert(<#=table.Name#> model)
		{
			
			<#=table.Name#> result;
			using(IDbConnection conn = new SqlConnection(connectionString))
			{
<#
	StringBuilder sbValuesInsert = new StringBuilder();
	StringBuilder sbColumnsInsert = new StringBuilder();
	table.ColumnList.ForEach(column => {
		if(column.IsPrimaryKey) primaryKey = column.Name;
		if(!column.IsPrimaryKey && !column.IsIdentity && column.Type != "timestamp")
		{
			sbValuesInsert.Append(",@" + column.Name);
			sbColumnsInsert.Append(",[" + column.Name + "]");
        }
	});
	
	string valuesInsert = sbValuesInsert.ToString().Substring(1, sbValuesInsert.Length - 1);
	string columnsInsert =sbColumnsInsert.ToString().Substring(1, sbColumnsInsert.Length - 1);
#>
				object identityColumn = conn.ExecuteScalar("INSERT INTO [<#=table.Name#>](<#=columnsInsert#>) VALUES(<#=valuesInsert#>);SELECT SCOPE_IDENTITY();", model);
				int identity = int.Parse(identityColumn.ToString());
				result = Detail(identity);
			}
			return result;
		}

		public <#=table.Name#> Update(<#=table.Name#> model)
		{
			
			<#=table.Name#> result;
			using(IDbConnection conn = new SqlConnection(connectionString))
			{
<#
	StringBuilder sbUpdate = new StringBuilder();
	table.ColumnList.ForEach(column => {
		if(!column.IsPrimaryKey && !column.IsIdentity && column.Type != "timestamp")
		{
			sbUpdate.Append(",[" + column.Name + "] = ISNULL(@" + column.Name+",[" + column.Name + "])");
        }
	});
	string setUpdate = sbUpdate.ToString().Substring(1, sbUpdate.Length - 1);
#>
				conn.Execute("UPDATE [<#=table.Name#>] SET <#=setUpdate#> WHERE [<#=primaryKey#>] = @<#=primaryKey#>", model);
				result = Detail(model.<#=primaryKey#>.Value);
			}
			return result;
		}

		public void Delete(int identity)
		{
			using(IDbConnection conn = new SqlConnection(connectionString))
			{
				conn.Execute("DELETE FROM [<#=table.Name#>] WHERE [<#=primaryKey#>] = @<#=primaryKey#>", new { <#=primaryKey#> = identity });
			}
		}
	}
<#
});
#>
}